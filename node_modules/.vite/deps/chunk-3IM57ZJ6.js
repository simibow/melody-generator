import {
  __export
} from "./chunk-CSAU5B4Q.js";

// node_modules/tone/build/esm/core/util/Debug.js
var Debug_exports = {};
__export(Debug_exports, {
  assert: () => assert,
  assertContextRunning: () => assertContextRunning,
  assertRange: () => assertRange,
  assertUsedScheduleTime: () => assertUsedScheduleTime,
  enterScheduledCallback: () => enterScheduledCallback,
  log: () => log,
  setLogger: () => setLogger,
  warn: () => warn
});

// node_modules/tone/build/esm/core/util/TypeCheck.js
function isUndef(arg) {
  return arg === void 0;
}
function isDefined(arg) {
  return arg !== void 0;
}
function isFunction(arg) {
  return typeof arg === "function";
}
function isNumber(arg) {
  return typeof arg === "number";
}
function isObject(arg) {
  return Object.prototype.toString.call(arg) === "[object Object]" && arg.constructor === Object;
}
function isBoolean(arg) {
  return typeof arg === "boolean";
}
function isArray(arg) {
  return Array.isArray(arg);
}
function isString(arg) {
  return typeof arg === "string";
}
function isNote(arg) {
  return isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);
}

// node_modules/tone/build/esm/core/util/Debug.js
function assert(statement, error) {
  if (!statement) {
    throw new Error(error);
  }
}
function assertRange(value, gte, lte = Infinity) {
  if (!(gte <= value && value <= lte)) {
    throw new RangeError(`Value must be within [${gte}, ${lte}], got: ${value}`);
  }
}
function assertContextRunning(context) {
  if (!context.isOffline && context.state !== "running") {
    warn('The AudioContext is "suspended". Invoke Tone.start() from a user action to start the audio.');
  }
}
var isInsideScheduledCallback = false;
var printedScheduledWarning = false;
function enterScheduledCallback(insideCallback) {
  isInsideScheduledCallback = insideCallback;
}
function assertUsedScheduleTime(time) {
  if (isUndef(time) && isInsideScheduledCallback && !printedScheduledWarning) {
    printedScheduledWarning = true;
    warn("Events scheduled inside of scheduled callbacks should use the passed in scheduling time. See https://github.com/Tonejs/Tone.js/wiki/Accurate-Timing");
  }
}
var defaultLogger = console;
function setLogger(logger) {
  defaultLogger = logger;
}
function log(...args) {
  defaultLogger.log(...args);
}
function warn(...args) {
  defaultLogger.warn(...args);
}

export {
  isUndef,
  isDefined,
  isFunction,
  isNumber,
  isObject,
  isBoolean,
  isArray,
  isString,
  isNote,
  assert,
  assertRange,
  assertContextRunning,
  enterScheduledCallback,
  assertUsedScheduleTime,
  setLogger,
  log,
  warn,
  Debug_exports
};
//# sourceMappingURL=chunk-3IM57ZJ6.js.map
