{
  "version": 3,
  "sources": ["../../midi-writer-js/build/index.js"],
  "sourcesContent": ["'use strict';\n\n/**\n * MIDI file format constants.\n * @return {Constants}\n */\nvar Constants = {\n    VERSION: '3.1.1',\n    HEADER_CHUNK_TYPE: [0x4d, 0x54, 0x68, 0x64],\n    HEADER_CHUNK_LENGTH: [0x00, 0x00, 0x00, 0x06],\n    HEADER_CHUNK_FORMAT0: [0x00, 0x00],\n    HEADER_CHUNK_FORMAT1: [0x00, 0x01],\n    HEADER_CHUNK_DIVISION: [0x00, 0x80],\n    TRACK_CHUNK_TYPE: [0x4d, 0x54, 0x72, 0x6b],\n    META_EVENT_ID: 0xFF,\n    META_SMTPE_OFFSET: 0x54\n};\n\n// src/utils.ts\nvar fillStr = (s, n) => Array(Math.abs(n) + 1).join(s);\n\n// src/named.ts\nfunction isNamed(src) {\n  return src !== null && typeof src === \"object\" && typeof src.name === \"string\" ? true : false;\n}\n\n// src/pitch.ts\nfunction isPitch(pitch) {\n  return pitch !== null && typeof pitch === \"object\" && typeof pitch.step === \"number\" && typeof pitch.alt === \"number\" ? true : false;\n}\nvar FIFTHS = [0, 2, 4, -1, 1, 3, 5];\nvar STEPS_TO_OCTS = FIFTHS.map(\n  (fifths) => Math.floor(fifths * 7 / 12)\n);\nfunction encode(pitch) {\n  const { step, alt, oct, dir = 1 } = pitch;\n  const f = FIFTHS[step] + 7 * alt;\n  if (oct === void 0) {\n    return [dir * f];\n  }\n  const o = oct - STEPS_TO_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n}\n\n// src/note.ts\nvar NoNote = { empty: true, name: \"\", pc: \"\", acc: \"\" };\nvar cache = /* @__PURE__ */ new Map();\nvar stepToLetter = (step) => \"CDEFGAB\".charAt(step);\nvar altToAcc = (alt) => alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt);\nvar accToAlt = (acc) => acc[0] === \"b\" ? -acc.length : acc.length;\nfunction note(src) {\n  const stringSrc = JSON.stringify(src);\n  const cached = cache.get(stringSrc);\n  if (cached) {\n    return cached;\n  }\n  const value = typeof src === \"string\" ? parse(src) : isPitch(src) ? note(pitchName(src)) : isNamed(src) ? note(src.name) : NoNote;\n  cache.set(stringSrc, value);\n  return value;\n}\nvar REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\nfunction tokenizeNote(str) {\n  const m = REGEX.exec(str);\n  return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\n}\nvar mod = (n, m) => (n % m + m) % m;\nvar SEMI = [0, 2, 4, 5, 7, 9, 11];\nfunction parse(noteName) {\n  const tokens = tokenizeNote(noteName);\n  if (tokens[0] === \"\" || tokens[3] !== \"\") {\n    return NoNote;\n  }\n  const letter = tokens[0];\n  const acc = tokens[1];\n  const octStr = tokens[2];\n  const step = (letter.charCodeAt(0) + 3) % 7;\n  const alt = accToAlt(acc);\n  const oct = octStr.length ? +octStr : void 0;\n  const coord = encode({ step, alt, oct });\n  const name = letter + acc + octStr;\n  const pc = letter + acc;\n  const chroma = (SEMI[step] + alt + 120) % 12;\n  const height = oct === void 0 ? mod(SEMI[step] + alt, 12) - 12 * 99 : SEMI[step] + alt + 12 * (oct + 1);\n  const midi = height >= 0 && height <= 127 ? height : null;\n  const freq = oct === void 0 ? null : Math.pow(2, (height - 69) / 12) * 440;\n  return {\n    empty: false,\n    acc,\n    alt,\n    chroma,\n    coord,\n    freq,\n    height,\n    letter,\n    midi,\n    name,\n    oct,\n    pc,\n    step\n  };\n}\nfunction pitchName(props) {\n  const { step, alt, oct } = props;\n  const letter = stepToLetter(step);\n  if (!letter) {\n    return \"\";\n  }\n  const pc = letter + altToAcc(alt);\n  return oct || oct === 0 ? pc + oct : pc;\n}\n\n// index.ts\nfunction isMidi(arg) {\n  return +arg >= 0 && +arg <= 127;\n}\nfunction toMidi(note$1) {\n  if (isMidi(note$1)) {\n    return +note$1;\n  }\n  const n = note(note$1);\n  return n.empty ? null : n.midi;\n}\n\n/**\n * Static utility functions used throughout the library.\n */\nvar Utils = /** @class */ (function () {\n    function Utils() {\n    }\n    /**\n     * Gets MidiWriterJS version number.\n     * @return {string}\n     */\n    Utils.version = function () {\n        return Constants.VERSION;\n    };\n    /**\n     * Convert a string to an array of bytes\n     * @param {string} string\n     * @return {array}\n     */\n    Utils.stringToBytes = function (string) {\n        return string.split('').map(function (char) { return char.charCodeAt(0); });\n    };\n    /**\n     * Checks if argument is a valid number.\n     * @param {*} n - Value to check\n     * @return {boolean}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Utils.isNumeric = function (n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    };\n    /**\n     * Returns the correct MIDI number for the specified pitch.\n     * Uses Tonal Midi - https://github.com/danigb/tonal/tree/master/packages/midi\n     * @param {(string|number)} pitch - 'C#4' or midi note code\n     * @param {string} middleC\n     * @return {number}\n     */\n    Utils.getPitch = function (pitch, middleC) {\n        if (middleC === void 0) { middleC = 'C4'; }\n        return 60 - toMidi(middleC) + toMidi(pitch);\n    };\n    /**\n     * Translates number of ticks to MIDI timestamp format, returning an array of\n     * hex strings with the time values. Midi has a very particular time to express time,\n     * take a good look at the spec before ever touching this function.\n     * Thanks to https://github.com/sergi/jsmidi\n     *\n     * @param {number} ticks - Number of ticks to be translated\n     * @return {array} - Bytes that form the MIDI time value\n     */\n    Utils.numberToVariableLength = function (ticks) {\n        ticks = Math.round(ticks);\n        var buffer = ticks & 0x7F;\n        // eslint-disable-next-line no-cond-assign\n        while (ticks = ticks >> 7) {\n            buffer <<= 8;\n            buffer |= ((ticks & 0x7F) | 0x80);\n        }\n        var bList = [];\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            bList.push(buffer & 0xff);\n            if (buffer & 0x80)\n                buffer >>= 8;\n            else {\n                break;\n            }\n        }\n        return bList;\n    };\n    /**\n     * Counts number of bytes in string\n     * @param {string} s\n     * @return {number}\n     */\n    Utils.stringByteCount = function (s) {\n        return encodeURI(s).split(/%..|./).length - 1;\n    };\n    /**\n     * Get an int from an array of bytes.\n     * @param {array} bytes\n     * @return {number}\n     */\n    Utils.numberFromBytes = function (bytes) {\n        var hex = '';\n        var stringResult;\n        bytes.forEach(function (byte) {\n            stringResult = byte.toString(16);\n            // ensure string is 2 chars\n            if (stringResult.length == 1)\n                stringResult = \"0\" + stringResult;\n            hex += stringResult;\n        });\n        return parseInt(hex, 16);\n    };\n    /**\n     * Takes a number and splits it up into an array of bytes.  Can be padded by passing a number to bytesNeeded\n     * @param {number} number\n     * @param {number} bytesNeeded\n     * @return {array} - Array of bytes\n     */\n    Utils.numberToBytes = function (number, bytesNeeded) {\n        bytesNeeded = bytesNeeded || 1;\n        var hexString = number.toString(16);\n        if (hexString.length & 1) { // Make sure hex string is even number of chars\n            hexString = '0' + hexString;\n        }\n        // Split hex string into an array of two char elements\n        var hexArray = hexString.match(/.{2}/g);\n        // Now parse them out as integers\n        var intArray = hexArray.map(function (item) { return parseInt(item, 16); });\n        // Prepend empty bytes if we don't have enough\n        if (intArray.length < bytesNeeded) {\n            while (bytesNeeded - intArray.length > 0) {\n                intArray.unshift(0);\n            }\n        }\n        return intArray;\n    };\n    /**\n     * Converts value to array if needed.\n     * @param {any} value\n     * @return {array}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Utils.toArray = function (value) {\n        if (Array.isArray(value))\n            return value;\n        return [value];\n    };\n    /**\n     * Converts velocity to value 0-127\n     * @param {number} velocity - Velocity value 1-100\n     * @return {number}\n     */\n    Utils.convertVelocity = function (velocity) {\n        // Max passed value limited to 100\n        velocity = velocity > 100 ? 100 : velocity;\n        return Math.round(velocity / 100 * 127);\n    };\n    /**\n     * Gets the total number of ticks of a specified duration.\n     * Note: type=='note' defaults to quarter note, type==='rest' defaults to 0\n     * @param {(string|array)} duration\n     * @return {number}\n     */\n    Utils.getTickDuration = function (duration) {\n        if (Array.isArray(duration)) {\n            // Recursively execute this method for each item in the array and return the sum of tick durations.\n            return duration.map(function (value) {\n                return Utils.getTickDuration(value);\n            }).reduce(function (a, b) {\n                return a + b;\n            }, 0);\n        }\n        duration = duration.toString();\n        if (duration.toLowerCase().charAt(0) === 't') {\n            // If duration starts with 't' then the number that follows is an explicit tick count\n            var ticks = parseInt(duration.substring(1));\n            if (isNaN(ticks) || ticks < 0) {\n                throw new Error(duration + ' is not a valid duration.');\n            }\n            return ticks;\n        }\n        // Need to apply duration here.  Quarter note == Constants.HEADER_CHUNK_DIVISION\n        var quarterTicks = Utils.numberFromBytes(Constants.HEADER_CHUNK_DIVISION);\n        var tickDuration = quarterTicks * Utils.getDurationMultiplier(duration);\n        return Utils.getRoundedIfClose(tickDuration);\n    };\n    /**\n     * Due to rounding errors in JavaScript engines,\n     * it's safe to round when we're very close to the actual tick number\n     *\n     * @static\n     * @param {number} tick\n     * @return {number}\n     */\n    Utils.getRoundedIfClose = function (tick) {\n        var roundedTick = Math.round(tick);\n        return Math.abs(roundedTick - tick) < 0.000001 ? roundedTick : tick;\n    };\n    /**\n     * Due to low precision of MIDI,\n     * we need to keep track of rounding errors in deltas.\n     * This function will calculate the rounding error for a given duration.\n     *\n     * @static\n     * @param {number} tick\n     * @return {number}\n     */\n    Utils.getPrecisionLoss = function (tick) {\n        var roundedTick = Math.round(tick);\n        return roundedTick - tick;\n    };\n    /**\n     * Gets what to multiple ticks/quarter note by to get the specified duration.\n     * Note: type=='note' defaults to quarter note, type==='rest' defaults to 0\n     * @param {string} duration\n     * @return {number}\n     */\n    Utils.getDurationMultiplier = function (duration) {\n        // Need to apply duration here.\n        // Quarter note == Constants.HEADER_CHUNK_DIVISION ticks.\n        if (duration === '0')\n            return 0;\n        var match = duration.match(/^(?<dotted>d+)?(?<base>\\d+)(?:t(?<tuplet>\\d*))?/);\n        if (match) {\n            var base = Number(match.groups.base);\n            // 1 or any power of two:\n            var isValidBase = base === 1 || ((base & (base - 1)) === 0);\n            if (isValidBase) {\n                // how much faster or slower is this note compared to a quarter?\n                var ratio = base / 4;\n                var durationInQuarters = 1 / ratio;\n                var _a = match.groups, dotted = _a.dotted, tuplet = _a.tuplet;\n                if (dotted) {\n                    var thisManyDots = dotted.length;\n                    var divisor = Math.pow(2, thisManyDots);\n                    durationInQuarters = durationInQuarters + (durationInQuarters * ((divisor - 1) / divisor));\n                }\n                if (typeof tuplet === 'string') {\n                    var fitInto = durationInQuarters * 2;\n                    // default to triplet:\n                    var thisManyNotes = Number(tuplet || '3');\n                    durationInQuarters = fitInto / thisManyNotes;\n                }\n                return durationInQuarters;\n            }\n        }\n        throw new Error(duration + ' is not a valid duration.');\n    };\n    return Utils;\n}());\n\n/**\n * Holds all data for a \"controller change\" MIDI event\n * @param {object} fields {controllerNumber: integer, controllerValue: integer, delta: integer}\n * @return {ControllerChangeEvent}\n */\nvar ControllerChangeEvent = /** @class */ (function () {\n    function ControllerChangeEvent(fields) {\n        this.channel = fields.channel - 1 || 0;\n        this.controllerValue = fields.controllerValue;\n        this.controllerNumber = fields.controllerNumber;\n        this.delta = fields.delta || 0x00;\n        this.name = 'ControllerChangeEvent';\n        this.status = 0xB0;\n        this.data = Utils.numberToVariableLength(fields.delta).concat(this.status | this.channel, this.controllerNumber, this.controllerValue);\n    }\n    return ControllerChangeEvent;\n}());\n\n/**\n * Object representation of a tempo meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {CopyrightEvent}\n */\nvar CopyrightEvent = /** @class */ (function () {\n    function CopyrightEvent(fields) {\n        this.delta = fields.delta || 0x00;\n        this.name = 'CopyrightEvent';\n        this.text = fields.text;\n        this.type = 0x02;\n        var textBytes = Utils.stringToBytes(this.text);\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(this.delta).concat(Constants.META_EVENT_ID, this.type, Utils.numberToVariableLength(textBytes.length), // Size\n        textBytes);\n    }\n    return CopyrightEvent;\n}());\n\n/**\n * Object representation of a cue point meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {CuePointEvent}\n */\nvar CuePointEvent = /** @class */ (function () {\n    function CuePointEvent(fields) {\n        this.delta = fields.delta || 0x00;\n        this.name = 'CuePointEvent';\n        this.text = fields.text;\n        this.type = 0x07;\n        var textBytes = Utils.stringToBytes(this.text);\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(this.delta).concat(Constants.META_EVENT_ID, this.type, Utils.numberToVariableLength(textBytes.length), // Size\n        textBytes);\n    }\n    return CuePointEvent;\n}());\n\n/**\n * Object representation of a end track meta event.\n * @param {object} fields {delta: integer}\n * @return {EndTrackEvent}\n */\nvar EndTrackEvent = /** @class */ (function () {\n    function EndTrackEvent(fields) {\n        this.delta = (fields === null || fields === void 0 ? void 0 : fields.delta) || 0x00;\n        this.name = 'EndTrackEvent';\n        this.type = [0x2F, 0x00];\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(this.delta).concat(Constants.META_EVENT_ID, this.type);\n    }\n    return EndTrackEvent;\n}());\n\n/**\n * Object representation of an instrument name meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {InstrumentNameEvent}\n */\nvar InstrumentNameEvent = /** @class */ (function () {\n    function InstrumentNameEvent(fields) {\n        this.delta = fields.delta || 0x00;\n        this.name = 'InstrumentNameEvent';\n        this.text = fields.text;\n        this.type = 0x04;\n        var textBytes = Utils.stringToBytes(this.text);\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(this.delta).concat(Constants.META_EVENT_ID, this.type, Utils.numberToVariableLength(textBytes.length), // Size\n        textBytes);\n    }\n    return InstrumentNameEvent;\n}());\n\n/**\n * Object representation of a key signature meta event.\n * @return {KeySignatureEvent}\n */\nvar KeySignatureEvent = /** @class */ (function () {\n    function KeySignatureEvent(sf, mi) {\n        this.name = 'KeySignatureEvent';\n        this.type = 0x59;\n        var mode = mi || 0;\n        sf = sf || 0;\n        //\tFunction called with string notation\n        if (typeof mi === 'undefined') {\n            var fifths = [\n                ['Cb', 'Gb', 'Db', 'Ab', 'Eb', 'Bb', 'F', 'C', 'G', 'D', 'A', 'E', 'B', 'F#', 'C#'],\n                ['ab', 'eb', 'bb', 'f', 'c', 'g', 'd', 'a', 'e', 'b', 'f#', 'c#', 'g#', 'd#', 'a#']\n            ];\n            var _sflen = sf.length;\n            var note = sf || 'C';\n            if (sf[0] === sf[0].toLowerCase())\n                mode = 1;\n            if (_sflen > 1) {\n                switch (sf.charAt(_sflen - 1)) {\n                    case 'm':\n                        mode = 1;\n                        note = sf.charAt(0).toLowerCase();\n                        note = note.concat(sf.substring(1, _sflen - 1));\n                        break;\n                    case '-':\n                        mode = 1;\n                        note = sf.charAt(0).toLowerCase();\n                        note = note.concat(sf.substring(1, _sflen - 1));\n                        break;\n                    case 'M':\n                        mode = 0;\n                        note = sf.charAt(0).toUpperCase();\n                        note = note.concat(sf.substring(1, _sflen - 1));\n                        break;\n                    case '+':\n                        mode = 0;\n                        note = sf.charAt(0).toUpperCase();\n                        note = note.concat(sf.substring(1, _sflen - 1));\n                        break;\n                }\n            }\n            var fifthindex = fifths[mode].indexOf(note);\n            sf = fifthindex === -1 ? 0 : fifthindex - 7;\n        }\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(0x00).concat(Constants.META_EVENT_ID, this.type, [0x02], // Size\n        Utils.numberToBytes(sf, 1), // Number of sharp or flats ( < 0 flat; > 0 sharp)\n        Utils.numberToBytes(mode, 1));\n    }\n    return KeySignatureEvent;\n}());\n\n/**\n * Object representation of a lyric meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {LyricEvent}\n */\nvar LyricEvent = /** @class */ (function () {\n    function LyricEvent(fields) {\n        this.delta = fields.delta || 0x00;\n        this.name = 'LyricEvent';\n        this.text = fields.text;\n        this.type = 0x05;\n        var textBytes = Utils.stringToBytes(this.text);\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(this.delta).concat(Constants.META_EVENT_ID, this.type, Utils.numberToVariableLength(textBytes.length), // Size\n        textBytes);\n    }\n    return LyricEvent;\n}());\n\n/**\n * Object representation of a marker meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {MarkerEvent}\n */\nvar MarkerEvent = /** @class */ (function () {\n    function MarkerEvent(fields) {\n        this.delta = fields.delta || 0x00;\n        this.name = 'MarkerEvent';\n        this.text = fields.text;\n        this.type = 0x06;\n        var textBytes = Utils.stringToBytes(this.text);\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(this.delta).concat(Constants.META_EVENT_ID, this.type, Utils.numberToVariableLength(textBytes.length), // Size\n        textBytes);\n    }\n    return MarkerEvent;\n}());\n\n/**\n * Holds all data for a \"note on\" MIDI event\n * @param {object} fields {data: []}\n * @return {NoteOnEvent}\n */\nvar NoteOnEvent = /** @class */ (function () {\n    function NoteOnEvent(fields) {\n        this.name = 'NoteOnEvent';\n        this.channel = fields.channel || 1;\n        this.pitch = fields.pitch;\n        this.wait = fields.wait || 0;\n        this.velocity = fields.velocity || 50;\n        this.tick = fields.tick || null;\n        this.delta = null;\n        this.data = fields.data;\n        this.status = 0x90;\n    }\n    /**\n     * Builds int array for this event.\n     * @param {Track} track - parent track\n     * @return {NoteOnEvent}\n     */\n    NoteOnEvent.prototype.buildData = function (track, precisionDelta, options) {\n        if (options === void 0) { options = {}; }\n        this.data = [];\n        // Explicitly defined startTick event\n        if (this.tick) {\n            this.tick = Utils.getRoundedIfClose(this.tick);\n            // If this is the first event in the track then use event's starting tick as delta.\n            if (track.tickPointer == 0) {\n                this.delta = this.tick;\n            }\n        }\n        else {\n            this.delta = Utils.getTickDuration(this.wait);\n            this.tick = Utils.getRoundedIfClose(track.tickPointer + this.delta);\n        }\n        this.deltaWithPrecisionCorrection = Utils.getRoundedIfClose(this.delta - precisionDelta);\n        this.data = Utils.numberToVariableLength(this.deltaWithPrecisionCorrection)\n            .concat(this.status | this.channel - 1, Utils.getPitch(this.pitch, options.middleC), Utils.convertVelocity(this.velocity));\n        return this;\n    };\n    return NoteOnEvent;\n}());\n\n/**\n * Holds all data for a \"note off\" MIDI event\n * @param {object} fields {data: []}\n * @return {NoteOffEvent}\n */\nvar NoteOffEvent = /** @class */ (function () {\n    function NoteOffEvent(fields) {\n        this.name = 'NoteOffEvent';\n        this.channel = fields.channel || 1;\n        this.pitch = fields.pitch;\n        this.velocity = fields.velocity || 50;\n        this.tick = fields.tick || null;\n        this.data = fields.data;\n        this.delta = fields.delta || Utils.getTickDuration(fields.duration);\n        this.status = 0x80;\n    }\n    /**\n     * Builds int array for this event.\n     * @param {Track} track - parent track\n     * @return {NoteOffEvent}\n     */\n    NoteOffEvent.prototype.buildData = function (track, precisionDelta, options) {\n        if (options === void 0) { options = {}; }\n        if (this.tick === null) {\n            this.tick = Utils.getRoundedIfClose(this.delta + track.tickPointer);\n        }\n        this.deltaWithPrecisionCorrection = Utils.getRoundedIfClose(this.delta - precisionDelta);\n        this.data = Utils.numberToVariableLength(this.deltaWithPrecisionCorrection)\n            .concat(this.status | this.channel - 1, Utils.getPitch(this.pitch, options.middleC), Utils.convertVelocity(this.velocity));\n        return this;\n    };\n    return NoteOffEvent;\n}());\n\n/**\n * Wrapper for noteOnEvent/noteOffEvent objects that builds both events.\n * @param {object} fields - {pitch: '[C4]', duration: '4', wait: '4', velocity: 1-100}\n * @return {NoteEvent}\n */\nvar NoteEvent = /** @class */ (function () {\n    function NoteEvent(fields) {\n        this.data = [];\n        this.name = 'NoteEvent';\n        this.pitch = Utils.toArray(fields.pitch);\n        this.channel = fields.channel || 1;\n        this.duration = fields.duration || '4';\n        this.grace = fields.grace;\n        this.repeat = fields.repeat || 1;\n        this.sequential = fields.sequential || false;\n        this.tick = fields.startTick || fields.tick || null;\n        this.velocity = fields.velocity || 50;\n        this.wait = fields.wait || 0;\n        this.tickDuration = Utils.getTickDuration(this.duration);\n        this.restDuration = Utils.getTickDuration(this.wait);\n        this.events = []; // Hold actual NoteOn/NoteOff events\n    }\n    /**\n     * Builds int array for this event.\n     * @return {NoteEvent}\n     */\n    NoteEvent.prototype.buildData = function () {\n        var _this = this;\n        // Reset data array\n        this.data = [];\n        // Apply grace note(s) and subtract ticks (currently 1 tick per grace note) from tickDuration so net value is the same\n        if (this.grace) {\n            var graceDuration_1 = 1;\n            this.grace = Utils.toArray(this.grace);\n            this.grace.forEach(function () {\n                var noteEvent = new NoteEvent({ pitch: _this.grace, duration: 'T' + graceDuration_1 });\n                _this.data = _this.data.concat(noteEvent.data);\n            });\n        }\n        // fields.pitch could be an array of pitches.\n        // If so create note events for each and apply the same duration.\n        // By default this is a chord if it's an array of notes that requires one NoteOnEvent.\n        // If this.sequential === true then it's a sequential string of notes that requires separate NoteOnEvents.\n        if (!this.sequential) {\n            // Handle repeat\n            for (var j = 0; j < this.repeat; j++) {\n                // Note on\n                this.pitch.forEach(function (p, i) {\n                    var noteOnNew;\n                    if (i == 0) {\n                        noteOnNew = new NoteOnEvent({\n                            channel: _this.channel,\n                            wait: _this.wait,\n                            delta: Utils.getTickDuration(_this.wait),\n                            velocity: _this.velocity,\n                            pitch: p,\n                            tick: _this.tick,\n                        });\n                    }\n                    else {\n                        // Running status (can ommit the note on status)\n                        //noteOn = new NoteOnEvent({data: [0, Utils.getPitch(p), Utils.convertVelocity(this.velocity)]});\n                        noteOnNew = new NoteOnEvent({\n                            channel: _this.channel,\n                            wait: 0,\n                            delta: 0,\n                            velocity: _this.velocity,\n                            pitch: p,\n                            tick: _this.tick,\n                        });\n                    }\n                    _this.events.push(noteOnNew);\n                });\n                // Note off\n                this.pitch.forEach(function (p, i) {\n                    var noteOffNew;\n                    if (i == 0) {\n                        //noteOff = new NoteOffEvent({data: Utils.numberToVariableLength(tickDuration).concat(this.getNoteOffStatus(), Utils.getPitch(p), Utils.convertVelocity(this.velocity))});\n                        noteOffNew = new NoteOffEvent({\n                            channel: _this.channel,\n                            duration: _this.duration,\n                            velocity: _this.velocity,\n                            pitch: p,\n                            tick: _this.tick !== null ? Utils.getTickDuration(_this.duration) + _this.tick : null,\n                        });\n                    }\n                    else {\n                        // Running status (can omit the note off status)\n                        //noteOff = new NoteOffEvent({data: [0, Utils.getPitch(p), Utils.convertVelocity(this.velocity)]});\n                        noteOffNew = new NoteOffEvent({\n                            channel: _this.channel,\n                            duration: 0,\n                            velocity: _this.velocity,\n                            pitch: p,\n                            tick: _this.tick !== null ? Utils.getTickDuration(_this.duration) + _this.tick : null,\n                        });\n                    }\n                    _this.events.push(noteOffNew);\n                });\n            }\n        }\n        else {\n            // Handle repeat\n            for (var j = 0; j < this.repeat; j++) {\n                this.pitch.forEach(function (p, i) {\n                    var noteOnNew = new NoteOnEvent({\n                        channel: _this.channel,\n                        wait: (i > 0 ? 0 : _this.wait),\n                        delta: (i > 0 ? 0 : Utils.getTickDuration(_this.wait)),\n                        velocity: _this.velocity,\n                        pitch: p,\n                        tick: _this.tick,\n                    });\n                    var noteOffNew = new NoteOffEvent({\n                        channel: _this.channel,\n                        duration: _this.duration,\n                        velocity: _this.velocity,\n                        pitch: p,\n                    });\n                    _this.events.push(noteOnNew, noteOffNew);\n                });\n            }\n        }\n        return this;\n    };\n    return NoteEvent;\n}());\n\n/**\n * Holds all data for a \"Pitch Bend\" MIDI event\n * [ -1.0, 0, 1.0 ] ->  [ 0, 8192, 16383]\n * @param {object} fields { bend : float, channel : int, delta: int }\n * @return {PitchBendEvent}\n */\nvar PitchBendEvent = /** @class */ (function () {\n    function PitchBendEvent(fields) {\n        this.channel = fields.channel || 0;\n        this.delta = fields.delta || 0x00;\n        this.name = 'PitchBendEvent';\n        this.status = 0xE0;\n        var bend14 = this.scale14bits(fields.bend);\n        var lsbValue = bend14 & 0x7f;\n        var msbValue = (bend14 >> 7) & 0x7f;\n        this.data = Utils.numberToVariableLength(this.delta).concat(this.status | this.channel, lsbValue, msbValue);\n    }\n    PitchBendEvent.prototype.scale14bits = function (zeroOne) {\n        if (zeroOne <= 0) {\n            return Math.floor(16384 * (zeroOne + 1) / 2);\n        }\n        return Math.floor(16383 * (zeroOne + 1) / 2);\n    };\n    return PitchBendEvent;\n}());\n\n/**\n * Holds all data for a \"program change\" MIDI event\n * @param {object} fields {instrument: integer, delta: integer}\n * @return {ProgramChangeEvent}\n */\nvar ProgramChangeEvent = /** @class */ (function () {\n    function ProgramChangeEvent(fields) {\n        this.channel = fields.channel || 0;\n        this.delta = fields.delta || 0x00;\n        this.instrument = fields.instrument;\n        this.status = 0xC0;\n        this.name = 'ProgramChangeEvent';\n        // delta time defaults to 0.\n        this.data = Utils.numberToVariableLength(this.delta).concat(this.status | this.channel, this.instrument);\n    }\n    return ProgramChangeEvent;\n}());\n\n/**\n * Object representation of a tempo meta event.\n * @param {object} fields {bpm: integer, delta: integer}\n * @return {TempoEvent}\n */\nvar TempoEvent = /** @class */ (function () {\n    function TempoEvent(fields) {\n        this.bpm = fields.bpm;\n        this.delta = fields.delta || 0x00;\n        this.tick = fields.tick;\n        this.name = 'TempoEvent';\n        this.type = 0x51;\n        var tempo = Math.round(60000000 / this.bpm);\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(this.delta).concat(Constants.META_EVENT_ID, this.type, [0x03], // Size\n        Utils.numberToBytes(tempo, 3));\n    }\n    return TempoEvent;\n}());\n\n/**\n * Object representation of a tempo meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {TextEvent}\n */\nvar TextEvent = /** @class */ (function () {\n    function TextEvent(fields) {\n        this.delta = fields.delta || 0x00;\n        this.text = fields.text;\n        this.name = 'TextEvent';\n        this.type = 0x01;\n        var textBytes = Utils.stringToBytes(this.text);\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(fields.delta).concat(Constants.META_EVENT_ID, this.type, Utils.numberToVariableLength(textBytes.length), // Size\n        textBytes);\n    }\n    return TextEvent;\n}());\n\n/**\n * Object representation of a time signature meta event.\n * @return {TimeSignatureEvent}\n */\nvar TimeSignatureEvent = /** @class */ (function () {\n    function TimeSignatureEvent(numerator, denominator, midiclockspertick, notespermidiclock) {\n        this.name = 'TimeSignatureEvent';\n        this.type = 0x58;\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(0x00).concat(Constants.META_EVENT_ID, this.type, [0x04], // Size\n        Utils.numberToBytes(numerator, 1), // Numerator, 1 bytes\n        Utils.numberToBytes(Math.log2(denominator), 1), // Denominator is expressed as pow of 2, 1 bytes\n        Utils.numberToBytes(midiclockspertick || 24, 1), // MIDI Clocks per tick, 1 bytes\n        Utils.numberToBytes(notespermidiclock || 8, 1));\n    }\n    return TimeSignatureEvent;\n}());\n\n/**\n * Object representation of a tempo meta event.\n * @param {object} fields {text: string, delta: integer}\n * @return {TrackNameEvent}\n */\nvar TrackNameEvent = /** @class */ (function () {\n    function TrackNameEvent(fields) {\n        this.delta = fields.delta || 0x00;\n        this.name = 'TrackNameEvent';\n        this.text = fields.text;\n        this.type = 0x03;\n        var textBytes = Utils.stringToBytes(this.text);\n        // Start with zero time delta\n        this.data = Utils.numberToVariableLength(this.delta).concat(Constants.META_EVENT_ID, this.type, Utils.numberToVariableLength(textBytes.length), // Size\n        textBytes);\n    }\n    return TrackNameEvent;\n}());\n\n/**\n * Holds all data for a track.\n * @param {object} fields {type: number, data: array, size: array, events: array}\n * @return {Track}\n */\nvar Track = /** @class */ (function () {\n    function Track() {\n        this.type = Constants.TRACK_CHUNK_TYPE;\n        this.data = [];\n        this.size = [];\n        this.events = [];\n        this.explicitTickEvents = [];\n        // If there are any events with an explicit tick defined then we will create a \"sub\" track for those\n        // and merge them in and the end.\n        this.tickPointer = 0; // Each time an event is added this will increase\n    }\n    /**\n     * Adds any event type to the track.\n     * Events without a specific startTick property are assumed to be added in order of how they should output.\n     * Events with a specific startTick property are set aside for now will be merged in during build process.\n     *\n     * TODO: Don't put startTick events in their own array.  Just lump everything together and sort it out during buildData();\n     * @param {(NoteEvent|ProgramChangeEvent)} events - Event object or array of Event objects.\n     * @param {Function} mapFunction - Callback which can be used to apply specific properties to all events.\n     * @return {Track}\n     */\n    Track.prototype.addEvent = function (events, mapFunction) {\n        var _this = this;\n        Utils.toArray(events).forEach(function (event, i) {\n            if (event instanceof NoteEvent) {\n                // Handle map function if provided\n                if (typeof mapFunction === 'function') {\n                    var properties = mapFunction(i, event);\n                    if (typeof properties === 'object') {\n                        Object.assign(event, properties);\n                    }\n                }\n                // If this note event has an explicit startTick then we need to set aside for now\n                if (event.tick !== null) {\n                    _this.explicitTickEvents.push(event);\n                }\n                else {\n                    // Push each on/off event to track's event stack\n                    event.buildData().events.forEach(function (e) { return _this.events.push(e); });\n                }\n            }\n            else {\n                _this.events.push(event);\n            }\n        });\n        return this;\n    };\n    /**\n     * Builds int array of all events.\n     * @param {object} options\n     * @return {Track}\n     */\n    Track.prototype.buildData = function (options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        // Reset\n        this.data = [];\n        this.size = [];\n        this.tickPointer = 0;\n        var precisionLoss = 0;\n        this.events.forEach(function (event) {\n            // Build event & add to total tick duration\n            if (event instanceof NoteOnEvent || event instanceof NoteOffEvent) {\n                var built = event.buildData(_this, precisionLoss, options);\n                precisionLoss = Utils.getPrecisionLoss(event.deltaWithPrecisionCorrection || 0);\n                _this.data = _this.data.concat(built.data);\n                _this.tickPointer = Utils.getRoundedIfClose(event.tick);\n            }\n            else if (event instanceof TempoEvent) {\n                _this.tickPointer = Utils.getRoundedIfClose(event.tick);\n                _this.data = _this.data.concat(event.data);\n            }\n            else {\n                _this.data = _this.data.concat(event.data);\n            }\n        });\n        this.mergeExplicitTickEvents();\n        // If the last event isn't EndTrackEvent, then tack it onto the data.\n        if (!this.events.length || !(this.events[this.events.length - 1] instanceof EndTrackEvent)) {\n            this.data = this.data.concat((new EndTrackEvent).data);\n        }\n        this.size = Utils.numberToBytes(this.data.length, 4); // 4 bytes long\n        return this;\n    };\n    Track.prototype.mergeExplicitTickEvents = function () {\n        var _this = this;\n        if (!this.explicitTickEvents.length)\n            return;\n        // First sort asc list of events by startTick\n        this.explicitTickEvents.sort(function (a, b) { return a.tick - b.tick; });\n        // Now this.explicitTickEvents is in correct order, and so is this.events naturally.\n        // For each explicit tick event, splice it into the main list of events and\n        // adjust the delta on the following events so they still play normally.\n        this.explicitTickEvents.forEach(function (noteEvent) {\n            // Convert NoteEvent to it's respective NoteOn/NoteOff events\n            // Note that as we splice in events the delta for the NoteOff ones will\n            // Need to change based on what comes before them after the splice.\n            noteEvent.buildData().events.forEach(function (e) { return e.buildData(_this); });\n            // Merge each event individually into this track's event list.\n            noteEvent.events.forEach(function (event) { return _this.mergeSingleEvent(event); });\n        });\n        // Hacky way to rebuild track with newly spliced events.  Need better solution.\n        this.explicitTickEvents = [];\n        this.buildData();\n    };\n    /**\n     * Merges another track's events with this track.\n     * @param {Track} track\n     * @return {Track}\n     */\n    Track.prototype.mergeTrack = function (track) {\n        var _this = this;\n        // First build this track to populate each event's tick property\n        this.buildData();\n        // Then build track to be merged so that tick property is populated on all events & merge each event.\n        track.buildData().events.forEach(function (event) { return _this.mergeSingleEvent(event); });\n        return this;\n    };\n    /**\n     * Merges a single event into this track's list of events based on event.tick property.\n     * @param {AbstractEvent} - event\n     * @return {Track}\n     */\n    Track.prototype.mergeSingleEvent = function (event) {\n        // There are no events yet, so just add it in.\n        if (!this.events.length) {\n            this.addEvent(event);\n            return;\n        }\n        // Find index of existing event we need to follow with\n        var lastEventIndex;\n        for (var i = 0; i < this.events.length; i++) {\n            if (this.events[i].tick > event.tick)\n                break;\n            lastEventIndex = i;\n        }\n        var splicedEventIndex = lastEventIndex + 1;\n        // Need to adjust the delta of this event to ensure it falls on the correct tick.\n        event.delta = event.tick - this.events[lastEventIndex].tick;\n        // Splice this event at lastEventIndex + 1\n        this.events.splice(splicedEventIndex, 0, event);\n        // Now adjust delta of all following events\n        for (var i = splicedEventIndex + 1; i < this.events.length; i++) {\n            // Since each existing event should have a tick value at this point we just need to\n            // adjust delta to that the event still falls on the correct tick.\n            this.events[i].delta = this.events[i].tick - this.events[i - 1].tick;\n        }\n    };\n    /**\n     * Removes all events matching specified type.\n     * @param {string} eventName - Event type\n     * @return {Track}\n     */\n    Track.prototype.removeEventsByName = function (eventName) {\n        var _this = this;\n        this.events.forEach(function (event, index) {\n            if (event.name === eventName) {\n                _this.events.splice(index, 1);\n            }\n        });\n        return this;\n    };\n    /**\n     * Sets tempo of the MIDI file.\n     * @param {number} bpm - Tempo in beats per minute.\n     * @param {number} tick - Start tick.\n     * @return {Track}\n     */\n    Track.prototype.setTempo = function (bpm, tick) {\n        if (tick === void 0) { tick = 0; }\n        return this.addEvent(new TempoEvent({ bpm: bpm, tick: tick }));\n    };\n    /**\n     * Sets time signature.\n     * @param {number} numerator - Top number of the time signature.\n     * @param {number} denominator - Bottom number of the time signature.\n     * @param {number} midiclockspertick - Defaults to 24.\n     * @param {number} notespermidiclock - Defaults to 8.\n     * @return {Track}\n     */\n    Track.prototype.setTimeSignature = function (numerator, denominator, midiclockspertick, notespermidiclock) {\n        return this.addEvent(new TimeSignatureEvent(numerator, denominator, midiclockspertick, notespermidiclock));\n    };\n    /**\n     * Sets key signature.\n     * @param {*} sf -\n     * @param {*} mi -\n     * @return {Track}\n     */\n    Track.prototype.setKeySignature = function (sf, mi) {\n        return this.addEvent(new KeySignatureEvent(sf, mi));\n    };\n    /**\n     * Adds text to MIDI file.\n     * @param {string} text - Text to add.\n     * @return {Track}\n     */\n    Track.prototype.addText = function (text) {\n        return this.addEvent(new TextEvent({ text: text }));\n    };\n    /**\n     * Adds copyright to MIDI file.\n     * @param {string} text - Text of copyright line.\n     * @return {Track}\n     */\n    Track.prototype.addCopyright = function (text) {\n        return this.addEvent(new CopyrightEvent({ text: text }));\n    };\n    /**\n     * Adds Sequence/Track Name.\n     * @param {string} text - Text of track name.\n     * @return {Track}\n     */\n    Track.prototype.addTrackName = function (text) {\n        return this.addEvent(new TrackNameEvent({ text: text }));\n    };\n    /**\n     * Sets instrument name of track.\n     * @param {string} text - Name of instrument.\n     * @return {Track}\n     */\n    Track.prototype.addInstrumentName = function (text) {\n        return this.addEvent(new InstrumentNameEvent({ text: text }));\n    };\n    /**\n     * Adds marker to MIDI file.\n     * @param {string} text - Marker text.\n     * @return {Track}\n     */\n    Track.prototype.addMarker = function (text) {\n        return this.addEvent(new MarkerEvent({ text: text }));\n    };\n    /**\n     * Adds cue point to MIDI file.\n     * @param {string} text - Text of cue point.\n     * @return {Track}\n     */\n    Track.prototype.addCuePoint = function (text) {\n        return this.addEvent(new CuePointEvent({ text: text }));\n    };\n    /**\n     * Adds lyric to MIDI file.\n     * @param {string} text - Lyric text to add.\n     * @return {Track}\n     */\n    Track.prototype.addLyric = function (text) {\n        return this.addEvent(new LyricEvent({ text: text }));\n    };\n    /**\n     * Channel mode messages\n     * @return {Track}\n     */\n    Track.prototype.polyModeOn = function () {\n        var event = new NoteOnEvent({ data: [0x00, 0xB0, 0x7E, 0x00] });\n        return this.addEvent(event);\n    };\n    /**\n     * Sets a pitch bend.\n     * @param {float} bend - Bend value ranging [-1,1], zero meaning no bend.\n     * @return {Track}\n     */\n    Track.prototype.setPitchBend = function (bend) {\n        return this.addEvent(new PitchBendEvent({ bend: bend }));\n    };\n    /**\n     * Adds a controller change event\n     * @param {number} number - Control number.\n     * @param {number} value - Control value.\n     * @param {number} channel - Channel to send controller change event on (1-based).\n     * @param {number} delta - Track tick offset for cc event.\n     * @return {Track}\n     */\n    Track.prototype.controllerChange = function (number, value, channel, delta) {\n        return this.addEvent(new ControllerChangeEvent({ controllerNumber: number, controllerValue: value, channel: channel, delta: delta }));\n    };\n    return Track;\n}());\n\nvar VexFlow = /** @class */ (function () {\n    function VexFlow() {\n    }\n    /**\n     * Support for converting VexFlow voice into MidiWriterJS track\n     * @return MidiWriter.Track object\n     */\n    VexFlow.prototype.trackFromVoice = function (voice, options) {\n        var _this = this;\n        if (options === void 0) { options = { addRenderedAccidentals: false }; }\n        var track = new Track;\n        var wait = [];\n        voice.tickables.forEach(function (tickable) {\n            if (tickable.noteType === 'n') {\n                track.addEvent(new NoteEvent({\n                    pitch: tickable.keys.map(function (pitch, index) { return _this.convertPitch(pitch, index, tickable, options.addRenderedAccidentals); }),\n                    duration: _this.convertDuration(tickable),\n                    wait: wait\n                }));\n                // reset wait\n                wait = [];\n            }\n            else if (tickable.noteType === 'r') {\n                // move on to the next tickable and add this to the stack\n                // of the `wait` property for the next note event\n                wait.push(_this.convertDuration(tickable));\n            }\n        });\n        // There may be outstanding rests at the end of the track,\n        // pad with a ghost note (zero duration and velocity), just to capture the wait.\n        if (wait.length > 0) {\n            track.addEvent(new NoteEvent({ pitch: '[c4]', duration: '0', wait: wait, velocity: '0' }));\n        }\n        return track;\n    };\n    /**\n     * Converts VexFlow pitch syntax to MidiWriterJS syntax\n     * @param pitch string\n     * @param index pitch index\n     * @param note struct from Vexflow\n     * @param addRenderedAccidentals adds Vexflow rendered accidentals\n     */\n    VexFlow.prototype.convertPitch = function (pitch, index, note, addRenderedAccidentals) {\n        var _a;\n        if (addRenderedAccidentals === void 0) { addRenderedAccidentals = false; }\n        // Splits note name from octave\n        var pitchParts = pitch.split('/');\n        // Retrieves accidentals from pitch\n        // Removes natural accidentals since they are not accepted in Tonal Midi\n        var accidentals = pitchParts[0].substring(1).replace('n', '');\n        if (addRenderedAccidentals) {\n            (_a = note.getAccidentals()) === null || _a === void 0 ? void 0 : _a.forEach(function (accidental) {\n                if (accidental.index === index) {\n                    if (accidental.type === 'n') {\n                        accidentals = '';\n                    }\n                    else {\n                        accidentals += accidental.type;\n                    }\n                }\n            });\n        }\n        return pitchParts[0][0] + accidentals + pitchParts[1];\n    };\n    /**\n     * Converts VexFlow duration syntax to MidiWriterJS syntax\n     * @param note struct from VexFlow\n     */\n    VexFlow.prototype.convertDuration = function (note) {\n        return 'd'.repeat(note.dots) + this.convertBaseDuration(note.duration) + (note.tuplet ? 't' + note.tuplet.num_notes : '');\n    };\n    /**\n     * Converts VexFlow base duration syntax to MidiWriterJS syntax\n     * @param duration Vexflow duration\n     * @returns MidiWriterJS duration\n     */\n    VexFlow.prototype.convertBaseDuration = function (duration) {\n        switch (duration) {\n            case 'w':\n                return '1';\n            case 'h':\n                return '2';\n            case 'q':\n                return '4';\n            default:\n                return duration;\n        }\n    };\n    return VexFlow;\n}());\n\n/**\n * Object representation of a header chunk section of a MIDI file.\n * @param {number} numberOfTracks - Number of tracks\n * @return {Header}\n */\nvar Header = /** @class */ (function () {\n    function Header(numberOfTracks) {\n        this.type = Constants.HEADER_CHUNK_TYPE;\n        var trackType = numberOfTracks > 1 ? Constants.HEADER_CHUNK_FORMAT1 : Constants.HEADER_CHUNK_FORMAT0;\n        this.data = trackType.concat(Utils.numberToBytes(numberOfTracks, 2), // two bytes long,\n        Constants.HEADER_CHUNK_DIVISION);\n        this.size = [0, 0, 0, this.data.length];\n    }\n    return Header;\n}());\n\n/**\n * Object that puts together tracks and provides methods for file output.\n * @param {array|Track} tracks - A single {Track} object or an array of {Track} objects.\n * @param {object} options - {middleC: 'C4'}\n * @return {Writer}\n */\nvar Writer = /** @class */ (function () {\n    function Writer(tracks, options) {\n        if (options === void 0) { options = {}; }\n        // Ensure tracks is an array\n        this.tracks = Utils.toArray(tracks);\n        this.options = options;\n    }\n    /**\n     * Builds array of data from chunkschunks.\n     * @return {array}\n     */\n    Writer.prototype.buildData = function () {\n        var _this = this;\n        var data = [];\n        data.push(new Header(this.tracks.length));\n        // For each track add final end of track event and build data\n        this.tracks.forEach(function (track) {\n            data.push(track.buildData(_this.options));\n        });\n        return data;\n    };\n    /**\n     * Builds the file into a Uint8Array\n     * @return {Uint8Array}\n     */\n    Writer.prototype.buildFile = function () {\n        var build = [];\n        // Data consists of chunks which consists of data\n        this.buildData().forEach(function (d) { return build = build.concat(d.type, d.size, d.data); });\n        return new Uint8Array(build);\n    };\n    /**\n     * Convert file buffer to a base64 string.  Different methods depending on if browser or node.\n     * @return {string}\n     */\n    Writer.prototype.base64 = function () {\n        if (typeof btoa === 'function') {\n            var binary = '';\n            var bytes = this.buildFile();\n            var len = bytes.byteLength;\n            for (var i = 0; i < len; i++) {\n                binary += String.fromCharCode(bytes[i]);\n            }\n            return btoa(binary);\n        }\n        return Buffer.from(this.buildFile()).toString('base64');\n    };\n    /**\n     * Get the data URI.\n     * @return {string}\n     */\n    Writer.prototype.dataUri = function () {\n        return 'data:audio/midi;base64,' + this.base64();\n    };\n    /**\n     * Set option on instantiated Writer.\n     * @param {string} key\n     * @param {any} value\n     * @return {Writer}\n     */\n    Writer.prototype.setOption = function (key, value) {\n        this.options[key] = value;\n        return this;\n    };\n    /**\n     * Output to stdout\n     * @return {string}\n     */\n    Writer.prototype.stdout = function () {\n        return process.stdout.write(Buffer.from(this.buildFile()));\n    };\n    return Writer;\n}());\n\nvar main = {\n    Constants: Constants,\n    ControllerChangeEvent: ControllerChangeEvent,\n    CopyrightEvent: CopyrightEvent,\n    CuePointEvent: CuePointEvent,\n    EndTrackEvent: EndTrackEvent,\n    InstrumentNameEvent: InstrumentNameEvent,\n    KeySignatureEvent: KeySignatureEvent,\n    LyricEvent: LyricEvent,\n    MarkerEvent: MarkerEvent,\n    NoteOnEvent: NoteOnEvent,\n    NoteOffEvent: NoteOffEvent,\n    NoteEvent: NoteEvent,\n    PitchBendEvent: PitchBendEvent,\n    ProgramChangeEvent: ProgramChangeEvent,\n    TempoEvent: TempoEvent,\n    TextEvent: TextEvent,\n    TimeSignatureEvent: TimeSignatureEvent,\n    Track: Track,\n    TrackNameEvent: TrackNameEvent,\n    Utils: Utils,\n    VexFlow: VexFlow,\n    Writer: Writer\n};\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["Utils", "ControllerChangeEvent", "CopyrightEvent", "CuePointEvent", "EndTrackEvent", "InstrumentNameEvent", "KeySignatureEvent", "note", "LyricEvent", "MarkerEvent", "NoteOnEvent", "NoteOffEvent", "NoteEvent", "PitchBendEvent", "ProgramChangeEvent", "TempoEvent", "TextEvent", "TimeSignatureEvent", "TrackNameEvent", "Track", "VexFlow", "Header", "Writer"]
}
